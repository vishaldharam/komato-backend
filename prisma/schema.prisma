// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  role            Role             @default(CUSTOMER)
  isBlocked       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  userProfile     UserProfile?
  userAddresses   UserAddresses[]
  userPreferences UserPreferences?
  restaurant      Restaurant[]
  order           Order[]
}

enum Role {
  CUSTOMER
  ADMIN
  RESTAURANT_OWNER
  DELIVERY_BOY
}

model UserProfile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String?
  imgSrcURL String? // Full S3 image URL to be shown on frontend
  imgID     String? // S3 key (folder path/filename) for deletion or updates  
  phone     String?
  gender    String?
  dob       DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model UserAddresses {
  id        String   @id @default(uuid())
  userId    String
  label     String? // e.g. "Home", "Office"
  address   String
  city      String
  state     String
  pincode   String
  district  String
  latitude  Float
  longitude Float
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id          String   @id @default(uuid())
  userId      String   @unique
  vegOnly     Boolean  @default(false)
  cuisineTags String[] @default([]) // example: ["Italian", "South Indian"]
  maxDistance Int? // e.g. 3000 for 3km search radius
  user        User     @relation(fields: [userId], references: [id])
}

model Restaurant {
  id                 String                      @id @default(uuid())
  name               String
  description        String?
  category           String?
  phone              String?
  email              String?                     @unique
  bannerUrl          String?
  gstNo              String
  logoUrl            String?
  logoID             String?
  address            String
  latitude           Float
  longitude          Float
  isBlocked          Boolean?                    @default(false)
  isVerified         Boolean?                    @default(false)
  onboardingStatus   RestaurantOnboardingStatus? @default(INITIATED)
  onboardingComplete Boolean?                    @default(false)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  ownerId            String
  owner              User                        @relation(fields: [ownerId], references: [id])
  RestaurantDocs     RestaurantDocs[]
  order              Order[]
}

enum RestaurantOnboardingStatus {
  INITIATED
  DOCS_PENDING
  REVIEW
  VERIFIED
  REJECTED
  LIVE
}


model RestaurantDocs {
  id           String     @id @default(uuid())
  name         String
  docID        String //S3 bucket doc ID
  docUrl       String //signed url to view/download the doc.
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Order {
  id             String           @id @default(uuid())
  userId         String
  restaurantId   String
  status         OrderStatus      @default(PENDING)
  paymentType    PaymentType
  totalAmount    Decimal
  notes          String? 

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  items          OrderItem[]
  events         OrderEvent[]
  statusHistory  OrderStatusHistory[]
  payment        Payment?
  user           User              @relation(fields: [userId], references: [id])
  restaurant     Restaurant        @relation(fields: [restaurantId], references: [id])




  @@index([userId])
  @@index([restaurantId])
  @@index([status])
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String        @unique
  paymentStatus   PaymentStatus
  paymentGateway  String?
  transactionId   String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  itemId       String
  itemName     String
  quantity     Int
  pricePerUnit Decimal
  totalPrice   Decimal  @default(0.00)
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model OrderEvent {
  id        String   @id @default(uuid())
  orderId   String
  eventType String
  payload   Json
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  @@index([orderId])
}

model OrderStatusHistory {
  id             String      @id @default(uuid())
  orderId        String
  previousStatus OrderStatus?
  newStatus      OrderStatus
  changedAt      DateTime    @default(now())
  changedBy      String?
  order          Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum PaymentType {
  COD
  ONLINE
}

enum OrderStatus {
  PENDING
  PROCESSING
  PLACED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}